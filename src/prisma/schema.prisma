generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
  output        = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int     @id @default(autoincrement())
  name             String
  email            String  @unique
  role             String  @default("user")
  isVerified Boolean @default(false)
  cards            UserCard[]
  rooms            RoomUser[]
  verificationCodes VerificationCode[]
  createdRooms     Room[] @relation("RoomCreator") // <--- pour les rooms créées
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  files            File[]
}

model Card {
  id        Int        @id @default(autoincrement())
  value     String
  users     UserCard[]
}

model UserCard {
  userId Int
  cardId Int
  roomId Int

  user   User @relation(fields: [userId], references: [id])
  card   Card @relation(fields: [cardId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])

  @@id([userId, cardId, roomId])
}

model Room {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  createdBy Int
  creator   User     @relation("RoomCreator", fields: [createdBy], references: [id])
  users     RoomUser[]
  cards     UserCard[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomUser {
  roomId Int
  userId Int
  role   String   @default("user") 

  room    Room @relation(fields: [roomId], references: [id])
  user    User @relation(fields: [userId], references: [id])

  @@id([roomId, userId])
}

model VerificationCode {
  id          Int      @id @default(autoincrement())
  userId      Int
  email       String @unique
  code        String   
  expiresAt   DateTime 
  used        Boolean  @default(false) 

  user        User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
 model File {
   id           Int    @id @default(autoincrement())
  name         String
   originalName String
   extension    String
   usage        String
   userId       Int
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

